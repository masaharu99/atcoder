// package main

// import (
// 	"bufio"
// 	"fmt"
// 	"math"
// 	"os"
// 	"strconv"
// 	"strings"
// )

// // キューを自前実装

// var sc = bufio.NewScanner(os.Stdin)
// func init() {
// 	sc.Buffer([]byte{}, math.MaxInt64)
// 	sc.Split(bufio.ScanWords)
// }

// func main_bk() {
// 	h := ScanI()
// 	w := ScanI()
// 	d := ScanI()
// 	var s [][]string
// 	for i := 0; i < h; i++ {
// 		line := strings.Split(ScanS(), "")
// 		s = append(s, line)
// 	}

// 	dist := make([][]int, h)
// 	queue := NewQueue(int(math.Pow(10, 6)))

// 	for i := 0; i < h; i++ {
// 		dist[i] = make([]int, w)
// 	}

// 	for i := 0; i < h; i++ {
// 		for j := 0; j < w; j++ {
// 			if s[i][j] == "H" {
// 				dist[i][j] = 0
// 				queue.EnQueue(i, j)
// 			} else {
// 				dist[i][j] = -1
// 			}
// 		}
// 	}

// 	type Ck struct {
// 		h int
// 		w int
// 	}
// 	ck := []Ck{{-1,0}, {1,0}, {0,-1}, {0,1}}

// 	for !queue.IsEmpty() {
// 		f := queue.DeQueue()
// 		dep := dist[f[0]][f[1]]
// 		for _, val := range ck {
// 			x := f[1] + val.w
// 			y := f[0] + val.h
// 			if x < 0 || y < 0 || w <= x || h <= y {
// 				continue
// 			}
// 			if s[y][x] == "." && dist[y][x] == -1 {
// 				dist[y][x] = dep + 1
// 				queue.EnQueue(y, x)
// 			}
// 		}
// 	}

// 	ans := 0
// 	for i := 0; i < h; i++ {
// 		for j := 0; j < w; j++ {
// 			if dist[i][j] != -1 && dist[i][j] <= d {
// 				ans++
// 			}
// 		}
// 	}

// 	fmt.Println(ans)
// }

// type Queue struct {
// 	data [][]int
// }

// type QueueI interface {
// 	EnQueue(int, int)
// 	DeQueue() []int
// 	IsEmpty() bool
// 	Size() int
// }

// var _ QueueI = &Queue{}

// func NewQueue(cap int) *Queue {
// 	return &Queue{data: make([][]int, 0, cap)}
// }

// func (q *Queue) EnQueue(i int, j int) {
// 	q.data = append(q.data, []int{i, j})
// }

// func (q *Queue) DeQueue() []int {
// 	val := q.data[0]
// 	q.data = q.data[1:]
// 	return val
// }

// func (q *Queue) IsEmpty() bool {
// 	if len(q.data) == 0 {
// 		return true
// 	}
// 	return false
// }

// func (q *Queue) Size() int {
// 	return len(q.data)
// }

// func ScanI() int {
// 	sc.Scan()
// 	str, _ := strconv.Atoi(sc.Text())
// 	return str
// }

// func ScanS() string {
// 	sc.Scan()
// 	return sc.Text()
// }